<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
           http://www.springframework.org/schema/beans/spring-beans-3.2.xsd">

	<bean id="firstIoc" class="com.web.things.springioc.FirstIoc">
		<property name="prototype" ref="firstIocForPrototype" />
	</bean>
	<!-- 别名，可以使用alias定义的名称，来获取name定义的ID对象 -->
	<alias name="firstIoc" alias="secondIoc" />
	<bean id="firstIoc1" class="com.web.things.springioc.FirstIoc" />

	<!-- scope 是FirstIocForPrototype -->
	<bean id="firstIocForPrototype" class="com.web.things.springioc.FirstIocForPrototype"
		scope="prototype">
		<property name="ioc" ref="firstIoc" />
	</bean>


	<!-- 静态单例对象的spring管理 -->
	<bean id="singletonClass" class="com.web.things.springioc.SingletonClass"
		factory-method="getInstance" />

	<bean id="clientServiceLocator" class="com.web.things.springioc.ClientServiceLocator" />
	<bean id="clientService" factory-bean="clientServiceLocator"
		factory-method="createClientServiceInstance" />

	<!-- 构造函数-bean实例化 -->
	<bean id="exampleBeanConstructor" class="com.web.things.springioc.ExampleBean">
		<constructor-arg name="id" value="1" />
		<constructor-arg name="name" value="张三" />
	</bean>
	<bean id="exampleBeanConstructor1" class="com.web.things.springioc.ExampleBean1">
		<constructor-arg name="id" value="1" />
		<constructor-arg name="name" value="李四" />
	</bean>

	<!-- 构造函数私有化，bean 或者 construct的ref 可以为bean的name定义的值 -->
	<bean id="exampleBean3" class="com.web.things.springioc.ExampleBean3"
		factory-method="createInstance">
		<constructor-arg ref="exampleBean3AnotherName" />
		<constructor-arg name="id" value="1" />
	</bean>
	<bean id="exampleBean3Another" name="exampleBean3AnotherName"
		class="com.web.things.springioc.ExampleBean3Another" />

	<!-- 属性的名称和set之后的字符串不一致的情况，要 遵循 set之后的字符串格式，name属性第一个字母大小写可以不区分，后面的必须和set后面严格一致 -->
	<bean id="exampleBean2" class="com.web.things.springioc.ExampleBean2">
		<property name="dD" value="中国" />
	</bean>

	<!-- uses the p-namespace for even more succinct XML configuration -->
	<!-- <bean id="exampleBean2ForP" class="com.web.things.springioc.ExampleBean2" 
		destroy-method="close" p:dD="北京" /> -->

	<!-- 循环依赖测试 -->
	<bean id="circularDependencyClass1" class="com.web.things.springioc.CircularDependencyClass1">
		<property name="class2" ref="circularDependencyClass2" />
	</bean>
	<bean id="circularDependencyClass2" class="com.web.things.springioc.CircularDependencyClass2">
		<property name="class1" ref="circularDependencyClass1" />
	</bean>

	<!-- Properties 测试 -->
	<bean id="DAOPropertiesTest" class="com.web.things.springioc.dao.DaoProperties">
		<property name="properties">
			<props>
				<prop key="id">1</prop>
				<prop key="name">我是谁</prop>
			</props>
		</property>
	</bean>
	<bean id="DAOPropertiesTest2" class="com.web.things.springioc.dao.DaoProperties">
		<property name="properties">
			<value>
				id=2
				name=who am i
			</value>
		</property>
	</bean>

	<!-- idref标签测试 -->
	<bean id="idRefBean" class="com.web.things.springioc.IdRefBean">
		<property name="beanName">
			<idref bean="exampleBeanConstructor" />
		</property>
	</bean>

	<!-- InnerBean测试 -->
	<bean id="innerBean" class="com.web.things.springioc.InnerBean">
		<property name="bean">
			<bean class="com.web.things.springioc.ExampleBean">
				<constructor-arg name="id" value="1" />
				<constructor-arg name="name" value="内部实例化测试" />
			</bean>
		</property>
	</bean>

	<!-- Collections类型，spring注入 -->
	<bean id="collectionBean" class="com.web.things.springioc.CollectionBean">
		<property name="emails">
			<props>
				<prop key="administrator">administrator@example.org</prop>
				<prop key="support">support@example.org</prop>
				<prop key="development">development@example.org</prop>
			</props>
		</property>
		<property name="list">
			<list>
				<value>list1</value>
				<value>list2</value>
			</list>
		</property>
		<property name="map">
			<map key-type="java.lang.String" value-type="java.lang.String">
				<entry key="map1" value="map一" />
				<entry key="map2" value="map二" />
			</map>
		</property>
		<property name="set">
			<set>
				<value>set1</value>
				<value>set2</value>
				<value>set属性值3</value>
			</set>
		</property>
		<property name="array">
			<list>
				<value>数组1</value>
				<value>数组2</value>
			</list>
		</property>
	</bean>

	<!-- Collections类型，spring注入 属性 merge，default和false 作用一样 -->
	<bean id="collectionBeanMerge" parent="collectionBean">
		<property name="emails">
			<props merge="true">
				<prop key="sales">sales@example.com</prop>
				<prop key="support">support@example.org</prop>
			</props>
		</property>
	</bean>

	<!-- spring 替换掉一个方法 这个Bean要求实现Spring的MethodReplacer接口 -->
	<bean id="myValueCalculator" class="com.web.things.springioc.MyValueCalculator">
		<replaced-method name="computeValue" replacer="replacementComputeValue">
			<arg-type>java.lang.String</arg-type>
		</replaced-method>
	</bean>
	<bean id="replacementComputeValue" class="com.web.things.springioc.ReplacementComputeValue" />


</beans>