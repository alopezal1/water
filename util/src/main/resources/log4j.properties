####################################################
#对根的设置，此句为将等级为INFO的日志信息输出到stdout(控制台)和file这两个目的地，stdout和file的定义在下面的代码，可以任意起名。
#等级可分为OFF、FATAL、ERROR、WARN、INFO、DEBUG、ALL，如果配置OFF则不打出任何信息，
#如果配置为INFO这样只显示INFO, WARN, ERROR的log信息，而DEBUG信息不会被显示
####################################################
log4j.rootCategory=INFO,stdout,file

# 自定义设置，可以对类、包、工程单独设置，这里定义了com.web.things.util下的设置，util类似上面的stdout、file的含义，下面还需对util进行设置
#log4j.category.com.web.things.util=INFO,util

####################################################
#定义名为stdout的设置
#此句为定义名为stdout的输出端是哪种类型，可以是
#org.apache.log4j.ConsoleAppender（控制台），
#org.apache.log4j.FileAppender（文件），
#org.apache.log4j.DailyRollingFileAppender（每天产生一个日志文件），
#org.apache.log4j.RollingFileAppender（文件大小到达指定尺寸的时候产生一个新的文件）
#org.apache.log4j.WriterAppender（将日志信息以流格式发送到任意指定的地方）
####################################################
log4j.appender.stdout=org.apache.log4j.ConsoleAppender

#此句为定义名为stdout的输出端的layout是哪种类型，可以是
#org.apache.log4j.HTMLLayout（以HTML表格形式布局），
#org.apache.log4j.PatternLayout（可以灵活地指定布局模式），
#org.apache.log4j.SimpleLayout（包含日志信息的级别和信息字符串），
#org.apache.log4j.TTCCLayout（包含日志产生的时间、线程、类别等等信息）
log4j.appender.stdout.layout=org.apache.log4j.PatternLayout

#如果使用pattern布局就要指定的打印信息的具体格式ConversionPattern，打印参数如下：
# %m 输出代码中指定的消息
# %p 输出优先级，即DEBUG，INFO，WARN，ERROR，FATAL
# %r 输出自应用启动到输出该log信息耗费的毫秒数
# %c 输出所属的类目，通常就是所在类的全名
# %t 输出产生该日志事件的线程名
# %n 输出一个回车换行符，Windows平台为"rn”，Unix平台为"n”
# %d 输出日志时间点的日期或时间，默认格式为ISO8601，也可以在其后指定格式，
# 	比如：%d{yyyy MMM dd HH:mm:ss,SSS}，输出类似：2002年10月18日 22：10：28，921
# %l 输出日志事件的发生位置，包括类目名、发生的线程，以及在代码中的行数。
# [QC]是log信息的开头，可以为任意字符，一般为项目简称。
# 输出的信息 [TS] DEBUG [main] AbstractBeanFactory.getBean(189) | Returning cached instance of singleton bean 'MyAutoProxy'
#log4j.appender.stdout.layout.ConversionPattern=[web things] %p [%d{yyyy-MM-dd HH:mm:ss}] %C.%M(%L) | %m%n
log4j.appender.stdout.layout.ConversionPattern=[%c]%m%n

#定义名为stdout的设置
#log4j.appender.file=org.apache.log4j.DailyRollingFileAppender
log4j.appender.file=org.apache.log4j.RollingFileAppender
#文件位置和名称
log4j.appender.file.File=logs/sysyem.log
log4j.appender.file.layout=org.apache.log4j.PatternLayout
#log4j.appender.file.layout.ConversionPattern=%d-[TS] %p %t %c - %m%n
log4j.appender.file.layout.ConversionPattern=[%p][%d{yyyy-MM-dd HH\:mm\:ss,SSS}][%l]%m%n

#指定com.neusoft包下的所有类的等级为DEBUG，可以把com.neusoft改为自己项目所用的包名。
#log4j.logger.com.neusoft=DEBUG
#log4j.logger.com.opensymphony.oscache=ERROR
#log4j.logger.net.sf.navigator=ERROR
#log4j.logger.org.apache.commons=ERROR
#log4j.logger.org.apache.struts=WARN
#log4j.logger.org.displaytag=ERROR
#log4j.logger.org.springframework=DEBUG
#log4j.logger.com.ibatis.db=WARN
#log4j.logger.org.apache.velocity=FATAL