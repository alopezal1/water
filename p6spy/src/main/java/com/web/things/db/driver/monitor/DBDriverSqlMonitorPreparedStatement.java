package com.web.things.db.driver.monitor;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;

import com.web.things.db.driver.connection.DBDriverBasePreparedStatement;
import com.web.things.db.driver.monitor.manager.DBMonitorManager;

/**
 * @author songjz 
 * @time 2013年8月7日
 */
public class DBDriverSqlMonitorPreparedStatement extends DBDriverBasePreparedStatement{

	public DBDriverSqlMonitorPreparedStatement(PreparedStatement statement, String sql) {
		super(statement, sql);
	}

	@Override
	public ResultSet executeQuery() throws SQLException {
		try {
			return super.executeQuery();
		}finally {
			DBMonitorManager.moniter(sql);
		}
	}

	@Override
	public int executeUpdate() throws SQLException {
		try {
			return super.executeUpdate();
		}finally {
			DBMonitorManager.moniter(sql);
		}
	}

	@Override
	public boolean execute() throws SQLException {
		try {
			return super.execute();
		}finally {
			DBMonitorManager.moniter(sql);
		}
	}

	@Override
	public ResultSet executeQuery(String sql) throws SQLException {
		try {
			return super.executeQuery(sql);
		}finally {
			DBMonitorManager.moniter(sql);
		}
	}

	@Override
	public int executeUpdate(String sql) throws SQLException {
		try {
			return super.executeUpdate(sql);
		}finally {
			DBMonitorManager.moniter(sql);
		}
	}

	@Override
	public boolean execute(String sql) throws SQLException {
		try {
			return super.execute(sql);
		}finally {
			DBMonitorManager.moniter(sql);
		}
	}

	@Override
	public int[] executeBatch() throws SQLException {
		try {
			return super.executeBatch();
		} finally {
			if (!batchSqlList.isEmpty()) {
				for (String sql : batchSqlList) {
					DBMonitorManager.moniter(sql);
				}
			}
		}
	}

	@Override
	public int executeUpdate(String sql, int autoGeneratedKeys) throws SQLException {
		try {
			return super.executeUpdate(sql, autoGeneratedKeys);
		}finally {
			DBMonitorManager.moniter(sql);
		}
	}

	@Override
	public int executeUpdate(String sql, int[] columnIndexes) throws SQLException {
		try {
			return super.executeUpdate(sql, columnIndexes);
		}finally {
			DBMonitorManager.moniter(sql);
		}
	}

	@Override
	public int executeUpdate(String sql, String[] columnNames) throws SQLException {
		try {
			return super.executeUpdate(sql, columnNames);
		}finally {
			DBMonitorManager.moniter(sql);
		}
	}

	@Override
	public boolean execute(String sql, int autoGeneratedKeys) throws SQLException {
		try {
			return super.execute(sql, autoGeneratedKeys);
		}finally {
			DBMonitorManager.moniter(sql);
		}
	}

	@Override
	public boolean execute(String sql, int[] columnIndexes) throws SQLException {
		try {
			return super.execute(sql, columnIndexes);
		}finally {
			DBMonitorManager.moniter(sql);
		}
	}

	@Override
	public boolean execute(String sql, String[] columnNames) throws SQLException {
		try {
			return super.execute(sql, columnNames);
		}finally {
			DBMonitorManager.moniter(sql);
		}
	}
	
}
