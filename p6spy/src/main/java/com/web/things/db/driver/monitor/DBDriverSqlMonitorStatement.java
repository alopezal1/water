package com.web.things.db.driver.monitor;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;

import com.web.things.db.driver.connection.DBDriverBaseStatement;
import com.web.things.db.driver.monitor.manager.DBMonitorManager;

/**
 * 监听
 * 
 * @author songjz
 * @time 2013年8月7日
 */
public class DBDriverSqlMonitorStatement extends DBDriverBaseStatement {

	public DBDriverSqlMonitorStatement(Statement statement) {
		super(statement);
	}

	@Override
	public ResultSet executeQuery(String sql) throws SQLException {
		try {
			return super.executeQuery(sql);
		} finally {
			DBMonitorManager.moniter(sql);
		}
	}

	@Override
	public int executeUpdate(String sql) throws SQLException {
		try {
			return super.executeUpdate(sql);
		} finally {
			DBMonitorManager.moniter(sql);
		}
	}

	@Override
	public boolean execute(String sql) throws SQLException {
		try {
			return super.execute(sql);
		} finally {
			DBMonitorManager.moniter(sql);
		}
	}

	@Override
	public int executeUpdate(String sql, int autoGeneratedKeys) throws SQLException {
		try {
			return super.executeUpdate(sql, autoGeneratedKeys);
		} finally {
			DBMonitorManager.moniter(sql);
		}
	}

	@Override
	public int executeUpdate(String sql, int[] columnIndexes) throws SQLException {
		try {
			return super.executeUpdate(sql, columnIndexes);
		} finally {
			DBMonitorManager.moniter(sql);
		}
	}

	@Override
	public int executeUpdate(String sql, String[] columnNames) throws SQLException {
		try {
			return super.executeUpdate(sql, columnNames);
		} finally {
			DBMonitorManager.moniter(sql);
		}
	}

	@Override
	public boolean execute(String sql, int autoGeneratedKeys) throws SQLException {
		try {
			return super.execute(sql, autoGeneratedKeys);
		} finally {
			DBMonitorManager.moniter(sql);
		}
	}

	@Override
	public boolean execute(String sql, int[] columnIndexes) throws SQLException {
		try {
			return super.execute(sql, columnIndexes);
		} finally {
			DBMonitorManager.moniter(sql);
		}
	}

	@Override
	public boolean execute(String sql, String[] columnNames) throws SQLException {
		try {
			return super.execute(sql, columnNames);
		} finally {
			DBMonitorManager.moniter(sql);
		}
	}

	@Override
	public int[] executeBatch() throws SQLException {
		try {
			return super.executeBatch();
		} finally {
			if (!batchSqlList.isEmpty()) {
				for (String sql : batchSqlList) {
					DBMonitorManager.moniter(sql);
				}
			}
		}
	}

}
