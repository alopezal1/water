package com.web.things.db.driver.monitor.manager;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.sql.Statement;

import com.web.things.db.driver.connection.DBDriverBaseConnection;

/**
 * @author songjz
 * @time 2013年8月7日
 */
public class DBDriverSqlMonitorConnection extends DBDriverBaseConnection {

	public DBDriverSqlMonitorConnection(IDBDriverFactory factory, Connection realConnetion) {
		super(factory, realConnetion);
	}

	@Override
	public Statement createStatement() throws SQLException {
		return factory.createStatement(super.createStatement());
	}

	@Override
	public Statement createStatement(int resultSetType, int resultSetConcurrency)
			throws SQLException {
		return factory
				.createStatement((super.createStatement(resultSetType, resultSetConcurrency)));
	}

	@Override
	public Statement createStatement(int resultSetType, int resultSetConcurrency,
			int resultSetHoldability) throws SQLException {
		return factory.createStatement(super.createStatement(resultSetType, resultSetConcurrency,
				resultSetHoldability));
	}

	@Override
	public PreparedStatement prepareStatement(String sql) throws SQLException {
		PreparedStatement statment = super.prepareStatement(sql);
		return factory.createPreparedStatement(statment, sql);
	}

	@Override
	public PreparedStatement prepareStatement(String sql, int resultSetType,
			int resultSetConcurrency) throws SQLException {
		return factory.createPreparedStatement(
				super.prepareStatement(sql, resultSetType, resultSetConcurrency), sql);
	}

	@Override
	public PreparedStatement prepareStatement(String sql, int resultSetType,
			int resultSetConcurrency, int resultSetHoldability) throws SQLException {
		return factory.createPreparedStatement(super.prepareStatement(sql, resultSetType,
				resultSetConcurrency, resultSetHoldability), sql);
	}

	@Override
	public PreparedStatement prepareStatement(String sql, int autoGeneratedKeys)
			throws SQLException {
		return factory.createPreparedStatement(super.prepareStatement(sql, autoGeneratedKeys), sql);
	}

	@Override
	public PreparedStatement prepareStatement(String sql, int[] columnIndexes) throws SQLException {
		return factory.createPreparedStatement(super.prepareStatement(sql, columnIndexes), sql);
	}

	@Override
	public PreparedStatement prepareStatement(String sql, String[] columnNames) throws SQLException {
		return factory.createPreparedStatement(super.prepareStatement(sql, columnNames), sql);
	}

}
